//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WFdocEleks.DocEleksService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DocEleksService")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserPass {
            get {
                return this.UserPassField;
            }
            set {
                if ((object.ReferenceEquals(this.UserPassField, value) != true)) {
                    this.UserPassField = value;
                    this.RaisePropertyChanged("UserPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contact", Namespace="http://schemas.datacontract.org/2004/07/DocEleksService")]
    [System.SerializableAttribute()]
    public partial class Contact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ContactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Adress {
            get {
                return this.AdressField;
            }
            set {
                if ((object.ReferenceEquals(this.AdressField, value) != true)) {
                    this.AdressField = value;
                    this.RaisePropertyChanged("Adress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ContactId {
            get {
                return this.ContactIdField;
            }
            set {
                if ((this.ContactIdField.Equals(value) != true)) {
                    this.ContactIdField = value;
                    this.RaisePropertyChanged("ContactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstN {
            get {
                return this.FirstNField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNField, value) != true)) {
                    this.FirstNField = value;
                    this.RaisePropertyChanged("FirstN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastN {
            get {
                return this.LastNField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNField, value) != true)) {
                    this.LastNField = value;
                    this.RaisePropertyChanged("LastN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MiddleN {
            get {
                return this.MiddleNField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleNField, value) != true)) {
                    this.MiddleNField = value;
                    this.RaisePropertyChanged("MiddleN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNum {
            get {
                return this.PhoneNumField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumField, value) != true)) {
                    this.PhoneNumField = value;
                    this.RaisePropertyChanged("PhoneNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DocEleksService.IServiceDocEleksDB")]
    public interface IServiceDocEleksDB {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/InsertUser", ReplyAction="http://tempuri.org/IServiceDocEleksDB/InsertUserResponse")]
        int InsertUser(WFdocEleks.DocEleksService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/InsertUser", ReplyAction="http://tempuri.org/IServiceDocEleksDB/InsertUserResponse")]
        System.Threading.Tasks.Task<int> InsertUserAsync(WFdocEleks.DocEleksService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/ValidUser", ReplyAction="http://tempuri.org/IServiceDocEleksDB/ValidUserResponse")]
        int ValidUser(WFdocEleks.DocEleksService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/ValidUser", ReplyAction="http://tempuri.org/IServiceDocEleksDB/ValidUserResponse")]
        System.Threading.Tasks.Task<int> ValidUserAsync(WFdocEleks.DocEleksService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/ValidUserName", ReplyAction="http://tempuri.org/IServiceDocEleksDB/ValidUserNameResponse")]
        int ValidUserName(WFdocEleks.DocEleksService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/ValidUserName", ReplyAction="http://tempuri.org/IServiceDocEleksDB/ValidUserNameResponse")]
        System.Threading.Tasks.Task<int> ValidUserNameAsync(WFdocEleks.DocEleksService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/InsertContact", ReplyAction="http://tempuri.org/IServiceDocEleksDB/InsertContactResponse")]
        int InsertContact(WFdocEleks.DocEleksService.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/InsertContact", ReplyAction="http://tempuri.org/IServiceDocEleksDB/InsertContactResponse")]
        System.Threading.Tasks.Task<int> InsertContactAsync(WFdocEleks.DocEleksService.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/DeleteContact", ReplyAction="http://tempuri.org/IServiceDocEleksDB/DeleteContactResponse")]
        int DeleteContact(short contactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/DeleteContact", ReplyAction="http://tempuri.org/IServiceDocEleksDB/DeleteContactResponse")]
        System.Threading.Tasks.Task<int> DeleteContactAsync(short contactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/UpdateContact", ReplyAction="http://tempuri.org/IServiceDocEleksDB/UpdateContactResponse")]
        int UpdateContact(WFdocEleks.DocEleksService.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/UpdateContact", ReplyAction="http://tempuri.org/IServiceDocEleksDB/UpdateContactResponse")]
        System.Threading.Tasks.Task<int> UpdateContactAsync(WFdocEleks.DocEleksService.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/GetAllContacts", ReplyAction="http://tempuri.org/IServiceDocEleksDB/GetAllContactsResponse")]
        WFdocEleks.DocEleksService.Contact[] GetAllContacts(short userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/GetAllContacts", ReplyAction="http://tempuri.org/IServiceDocEleksDB/GetAllContactsResponse")]
        System.Threading.Tasks.Task<WFdocEleks.DocEleksService.Contact[]> GetAllContactsAsync(short userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/FindContacts", ReplyAction="http://tempuri.org/IServiceDocEleksDB/FindContactsResponse")]
        System.Data.DataTable FindContacts(short userId, string phoneNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/FindContacts", ReplyAction="http://tempuri.org/IServiceDocEleksDB/FindContactsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> FindContactsAsync(short userId, string phoneNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/GetUserId", ReplyAction="http://tempuri.org/IServiceDocEleksDB/GetUserIdResponse")]
        short GetUserId(WFdocEleks.DocEleksService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/GetUserId", ReplyAction="http://tempuri.org/IServiceDocEleksDB/GetUserIdResponse")]
        System.Threading.Tasks.Task<short> GetUserIdAsync(WFdocEleks.DocEleksService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/FindPhoneNumber", ReplyAction="http://tempuri.org/IServiceDocEleksDB/FindPhoneNumberResponse")]
        int FindPhoneNumber(short userId, string phoneNumer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDocEleksDB/FindPhoneNumber", ReplyAction="http://tempuri.org/IServiceDocEleksDB/FindPhoneNumberResponse")]
        System.Threading.Tasks.Task<int> FindPhoneNumberAsync(short userId, string phoneNumer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceDocEleksDBChannel : WFdocEleks.DocEleksService.IServiceDocEleksDB, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceDocEleksDBClient : System.ServiceModel.ClientBase<WFdocEleks.DocEleksService.IServiceDocEleksDB>, WFdocEleks.DocEleksService.IServiceDocEleksDB {
        
        public ServiceDocEleksDBClient() {
        }
        
        public ServiceDocEleksDBClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceDocEleksDBClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDocEleksDBClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDocEleksDBClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int InsertUser(WFdocEleks.DocEleksService.User user) {
            return base.Channel.InsertUser(user);
        }
        
        public System.Threading.Tasks.Task<int> InsertUserAsync(WFdocEleks.DocEleksService.User user) {
            return base.Channel.InsertUserAsync(user);
        }
        
        public int ValidUser(WFdocEleks.DocEleksService.User user) {
            return base.Channel.ValidUser(user);
        }
        
        public System.Threading.Tasks.Task<int> ValidUserAsync(WFdocEleks.DocEleksService.User user) {
            return base.Channel.ValidUserAsync(user);
        }
        
        public int ValidUserName(WFdocEleks.DocEleksService.User user) {
            return base.Channel.ValidUserName(user);
        }
        
        public System.Threading.Tasks.Task<int> ValidUserNameAsync(WFdocEleks.DocEleksService.User user) {
            return base.Channel.ValidUserNameAsync(user);
        }
        
        public int InsertContact(WFdocEleks.DocEleksService.Contact contact) {
            return base.Channel.InsertContact(contact);
        }
        
        public System.Threading.Tasks.Task<int> InsertContactAsync(WFdocEleks.DocEleksService.Contact contact) {
            return base.Channel.InsertContactAsync(contact);
        }
        
        public int DeleteContact(short contactId) {
            return base.Channel.DeleteContact(contactId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteContactAsync(short contactId) {
            return base.Channel.DeleteContactAsync(contactId);
        }
        
        public int UpdateContact(WFdocEleks.DocEleksService.Contact contact) {
            return base.Channel.UpdateContact(contact);
        }
        
        public System.Threading.Tasks.Task<int> UpdateContactAsync(WFdocEleks.DocEleksService.Contact contact) {
            return base.Channel.UpdateContactAsync(contact);
        }
        
        public WFdocEleks.DocEleksService.Contact[] GetAllContacts(short userId) {
            return base.Channel.GetAllContacts(userId);
        }
        
        public System.Threading.Tasks.Task<WFdocEleks.DocEleksService.Contact[]> GetAllContactsAsync(short userId) {
            return base.Channel.GetAllContactsAsync(userId);
        }
        
        public System.Data.DataTable FindContacts(short userId, string phoneNum) {
            return base.Channel.FindContacts(userId, phoneNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> FindContactsAsync(short userId, string phoneNum) {
            return base.Channel.FindContactsAsync(userId, phoneNum);
        }
        
        public short GetUserId(WFdocEleks.DocEleksService.User user) {
            return base.Channel.GetUserId(user);
        }
        
        public System.Threading.Tasks.Task<short> GetUserIdAsync(WFdocEleks.DocEleksService.User user) {
            return base.Channel.GetUserIdAsync(user);
        }
        
        public int FindPhoneNumber(short userId, string phoneNumer) {
            return base.Channel.FindPhoneNumber(userId, phoneNumer);
        }
        
        public System.Threading.Tasks.Task<int> FindPhoneNumberAsync(short userId, string phoneNumer) {
            return base.Channel.FindPhoneNumberAsync(userId, phoneNumer);
        }
    }
}
